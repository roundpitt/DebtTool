{
  "_args": [
    [
      {
        "raw": "plaid@2.0.x",
        "scope": null,
        "escapedName": "plaid",
        "name": "plaid",
        "rawSpec": "2.0.x",
        "spec": ">=2.0.0 <2.1.0",
        "type": "range"
      },
      "C:\\Users\\pl66553\\Documents\\ZombieFest"
    ]
  ],
  "_from": "plaid@>=2.0.0 <2.1.0",
  "_id": "plaid@2.0.5",
  "_inCache": true,
  "_location": "/plaid",
  "_nodeVersion": "4.4.5",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/plaid-2.0.5.tgz_1500917673321_0.9678004288580269"
  },
  "_npmUser": {
    "name": "michaelckelly",
    "email": "m@michaelckelly.com"
  },
  "_npmVersion": "2.15.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "plaid@2.0.x",
    "scope": null,
    "escapedName": "plaid",
    "name": "plaid",
    "rawSpec": "2.0.x",
    "spec": ">=2.0.0 <2.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/plaid/-/plaid-2.0.5.tgz",
  "_shasum": "ef01fe5d2dcd315c7c54d47e9f2a042f3175f5f8",
  "_shrinkwrap": null,
  "_spec": "plaid@2.0.x",
  "_where": "C:\\Users\\pl66553\\Documents\\ZombieFest",
  "bugs": {
    "url": "https://github.com/plaid/plaid-node/issues"
  },
  "dependencies": {
    "ramda": "0.23.x",
    "request": "2.74.x"
  },
  "description": "A node.js client for the Plaid API",
  "devDependencies": {
    "async": "2.1.x",
    "dotenv": "4.0.x",
    "expect.js": "0.3.x",
    "istanbul": "0.4.x",
    "jscs": "3.0.x",
    "jshint": "2.9.x",
    "mocha": "3.2.x",
    "moment": "2.17.x",
    "xyz": "2.1.x"
  },
  "directories": {},
  "dist": {
    "shasum": "ef01fe5d2dcd315c7c54d47e9f2a042f3175f5f8",
    "tarball": "https://registry.npmjs.org/plaid/-/plaid-2.0.5.tgz"
  },
  "gitHead": "f648c39c96eec98011663d68aef004b262ad1a7f",
  "homepage": "https://github.com/plaid/plaid-node#readme",
  "keywords": [
    "plaid",
    "plaid.com"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/plaid/plaid-node/blob/master/LICENSE"
    }
  ],
  "main": "lib/plaid.js",
  "maintainers": [
    {
      "name": "whockey",
      "email": "williamrhockey@gmail.com"
    },
    {
      "name": "davidchambers",
      "email": "dc@davidchambers.me"
    },
    {
      "name": "michaelckelly",
      "email": "m@michaelckelly.com"
    },
    {
      "name": "baburkhwaja",
      "email": "babur@plaid.com"
    }
  ],
  "name": "plaid",
  "optionalDependencies": {},
  "readme": "plaid-node  [![Circle CI](https://circleci.com/gh/plaid/plaid-node.svg?style=svg&circle-token=2efcf082d8df7e119325a4dbed9a1091ff5db422)](https://circleci.com/gh/plaid/plaid-node)  [![npm version](https://badge.fury.io/js/plaid.svg)](http://badge.fury.io/js/plaid)\n==============\n\nA node.js client library for the [Plaid API][1].\n\n**Note:** This module was recently refactored and released as version `2.0.x` to support [Plaid's updated API][11]. The previous module version, 1.2.0, and API legacy documentation, is still available via npm and mirrored as [`plaid-legacy`][13]. \n\n## Table of Contents\n\n- [plaid-node](#plaid-node)\n  * [Install](#install)\n  * [Getting started](#getting-started)\n  * [Methods](#methods)\n  * [Callbacks](#callbacks)\n  * [Error Handling](#error-handling)\n  * [Examples](#examples)\n  * [Promise Support](#promise-support)\n  * [Support](#support)\n  * [Contributing](#contributing)\n  * [License](#license)\n\n## Install\n\n```console\n$ npm install plaid\n```\n\n## Getting started\n\nThe module supports all Plaid API endpoints.  For complete information about the API, head\nto the [docs][2].\n\nAll endpoints require a valid `client_id`, `secret`, and `public_key` to\naccess and are accessible from a valid instance of a Plaid `Client`:\n\n```javascript\nconst plaid = require('plaid');\n\nconst plaidClient = new plaid.Client(client_id, secret, public_key, plaid_env, options);\n```\n\nThe `plaid_env` parameter dictates which Plaid API environment you will access. Values are:\n- `plaid.environments.production` - production use, creates `Item`s on https://production.plaid.com\n- `plaid.environments.development` - use for integration development and testing, creates `Item`s on https://development.plaid.com\n- `plaid.environments.sandbox` - quickly build out your integration with stateful test data, creates `Item`s on https://sandbox.plaid.com\n\nThe `options` parameter is optional and allows for clients to override the default options used to make requests. e.g.\n\n```javascript\nconst patientClient = new plaid.Client(client_id, secret, public_key, plaid_env, {\n  timeout: 10 * 60 * 1000, // 30 minutes\n  agent: 'Patient Agent'\n});\n```\n\nSee [here][12] for a complete list of options. The default timeout for requests is 10 minutes.\n\n## Methods\n\nOnce an instance of the client has been created you use the following methods:\n\n```javascript\nconst plaid = require('plaid');\n\n// Initialize client\nconst plaidClient = new plaid.Client(client_id, secret, public_key, plaid_env, options);\n\n// createPublicToken(String, Function)\nplaidClient.createPublicToken(access_token, cb);\n// exchangePublicToken(String, Function)\nplaidClient.exchangePublicToken(public_token, cb);\n// createProcessorToken(String, String, String, Function)\nplaidClient.createProcessorToken(access_token, account_id, processor, cb);\n\n// invalidateAccessToken(String, Function)\nplaidClient.invalidateAccessToken(access_token, cb);\n// updateAccessTokenVersion(String, Function)\nplaidClient.updateAccessTokenVersion(legacy_access_token, cb);\n// deleteItem(String, Function)\nplaidClient.deleteItem(access_token, cb);\n// getItem(String, Function)\nplaidClient.getItem(access_token, cb);\n// updateItemWebhook(String, String, Function)\nplaidClient.updateItemWebhook(access_token, webhook, cb);\n\n// getAccounts(String, Object?, Function)\nplaidClient.getAccounts(access_token, options, cb);\n// getBalance(String, Object?, Function)\nplaidClient.getBalance(access_token, options, cb);\n// getAuth(String, Object?, Function)\nplaidClient.getAuth(access_token, options, cb);\n// getIdentity(String, Function)\nplaidClient.getIdentity(access_token, cb);\n// getIncome(String, Function)\nplaidClient.getIncome(access_token, cb);\n// getCreditDetails(String, Function)\nplaidClient.getCreditDetails(access_token, cb);\n\n// getTransactions(String, Date(YYYY-MM-DD), Date(YYYY-MM-DD), Object?, Function)\nplaidClient.getTransactions(access_token, start_date, end_date, options, cb);\n\n// createStripeToken(String, String, Function)\nplaidClient.createStripeToken(access_token, account_id, cb);\n\n// getInstitutions(Number, Number, Function);\nplaidClient.getInstitutions(count, offset, cb);\n// getInstitutionsById(String, Object?, Function)\nplaidClient.getInstitutionById(institution_id, options, cb);\n// searchInstitutionsByName(String, [String], Object?, Function)\nplaidClient.searchInstitutionsByName(query, products, options, cb);\n\n// getCategories(Function)\nplaidClient.getCategories(cb);\n\n// resetLogin(String, Function)\n// Sandbox-only endpoint to trigger an `ITEM_LOGIN_REQUIRED` error\nplaidClient.resetLogin(access_token, cb);\n```\n\n**All parameters except `options` are required. If the options parameter is omitted, the last argument to the function\nwill be interpreted as the callback.**\n\n## Callbacks\n\nAll requests have callbacks of the following form:\n\n```javascript\nfunction callback(err, response) {\n  // err can be a network error or a Plaid API error (i.e. invalid credentials)\n}\n```\n\n## Error Handling\n\nThe `err` argument passed to either callback style can either be an instance of `Error`\nor a [Plaid API error][3] object.  An `Error` object\nis only passed back in the case of a HTTP connection error.  The following code distinguishes\nbetween a Plaid error and a standard Error instance:\n\n```javascript\nfunction callback(err, response) {\n  if (err != null) {\n    if (err.error_code != null) {\n      // This is a Plaid error\n      console.log(err.error_code + ': ' + err.error_message);\n    } else {\n      // This is a connection error, an Error object\n      console.log(err.toString());\n    }\n  }\n}\n```\n\n## Examples\n\nExchange a `public_token` from [Plaid Link][6] for a Plaid `access_token` and then\nretrieve account data:\n\n```javascript\nplaidClient.exchangePublicToken(public_token, function(err, res) {\n  const access_token = res.access_token;\n\n  plaidClient.getAccounts(access_token, function(err, res) {\n    console.log(res.accounts);\n  });\n});\n```\n\nRetrieve transactions for a transactions user for the last thirty days:\n\n```javascript\n\nconst now = moment();\nconst today = now.format('YYYY-MM-DD');\nconst thirtyDaysAgo = now.subtract(30, 'days').format('YYYY-MM-DD');\n\nplaidClient.getTransactions(access_token, thirtyDaysAgo, today, (err, res) => {\n  console.log(`You have ${res.transactions.length} transactions from the last thirty days.`);\n});\n```\n\nGet accounts for a particular `Item`:\n\n```javascript\nplaidClient.getAccounts(access_token, {\n  account_ids: ['123456790']\n}, (err, res) => {\n  console.log(res.accounts);\n});\n\n// The library also juggles arguments, when options is omitted\n\nplaidClient.getAccounts(access_token, (err, res) => {\n  console.log(res.accounts);\n});\n```\n\n## Promise Support\n\nEvery method returns a promise, so you don't have to use the callbacks.\n\nAPI methods that return either a success or an error can be used with the\nusual `then/else` paradigm, e.g.\n\n```javascript\nplaidPromise.then(successResponse => {\n  // ...\n}).catch(err => {\n  // ...\n});\n```\n\nPlaid API methods that may return an MFA response pass an array of responses\nto the next promise. The first element of the array is the `mfaResponse`, and\nthe second element is the `successResponse`. You can use destructuring to\nimprove readability.\n\nFor example:\n\n```javascript\nconst plaid = require('plaid');\n\nconst plaidClient = new plaid.Client(CLIENT_ID, SECRET, PUBLIC_KEY, plaid.environments.SANDBOX);\n\nplaidClient.getInstitutions(1, 0).then(successResponse => {\n  return successResponse.institutions;\n}).catch(err => {\n  throw new Error(`Unreachable code block for example: ${err}`);\n}).then(institutions => {\n  const institution = institutions[0];\n  const institutionId = institution.institution_id;\n  const products = ['transactions', 'info', 'numbers'];\n\n  const credentials = {\n    username: 'user_good',\n    password: 'pass_good'\n  };\n\n  return plaidClient.createItem(credentials, institutionId, products);\n}).then(([mfaResponse, successResponse]) => {\n  if (mfaResponse) {\n    throw new Error(`Unreachable code block for example: ${mfaResponse}`);\n  }\n\n  return plaidClient.getAccounts(successResponse.access_token);\n}).catch(err => {\n  throw new Error(`Unreachable code block for example: ${err}`);\n}).then(successResponse => {\n  console.log(successResponse.accounts);\n});\n```\n\nThe following is also valid:\n\n```javascript\nconst promise = plaidClient.createItem(credentials, institutionId, products);\n\npromise.then(array => {\n  const mfaResponse = array[0];\n  const successResponse = array[1];\n\n  // do something\n}).catch(err => {\n  console.log(err);\n});\n```\n\n## Support\n\nOpen an [issue][4]!\n\n## Contributing\n\nClick [here][7]!\n\n## License\n[MIT][5]\n\n[1]: https://plaid.com\n[2]: https://plaid.com/docs\n[4]: https://github.com/plaid/plaid-node/issues/new\n[5]: https://github.com/plaid/plaid-node/blob/master/LICENSE\n[6]: https://plaid.com/docs/api#creating-items-with-plaid-link\n[7]: ./CONTRIBUTING.md\n[9]: https://plaid.com/docs/link/stripe\n[10]: https://stripe.com/docs/api#create_bank_account_token\n[11]: https://blog.plaid.com/improving-our-api/\n[12]: https://github.com/request/request/blob/master/README.md#requestoptions-callback\n[13]: https://github.com/plaid/plaid-node-legacy\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/plaid/plaid-node.git"
  },
  "scripts": {},
  "version": "2.0.5"
}
